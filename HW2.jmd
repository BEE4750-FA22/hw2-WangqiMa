---
title: "BEE 4750/5750 Homework 2"
author: "Your name here (your netID here)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1
```julia
function dissolved_oxygen_concerntrations(x,CBODi, NBODi)
    if x <= 15
        U = 6
        B0 = (CBODi*10+50)/11
        N0 = (NBODi*10+35)/11
        a1 = exp(-0.55*x/U)
        a2 = (0.35/0.2)*(exp(-0.35*x/U)-a1)
        a3 = (0.25/0.3)*(exp(-0.25*x/U)-a1)
        C = 10*(1-a1)+(80/11)*a1-B0*a2-N0*a3
        B = B0 * exp(-0.35*x/U)
        N = N0 * exp(-0.25*x/U)
    else
        U = 6
        B0 = (3.790*110+675)/125
        N0 = (4.136*110+525)/125
        a1 = exp(-0.55*(x-15)/U)
        a2 = (0.35/0.2)*(exp(-0.35*(x-15)/U)-a1)
        a3 = (0.25/0.3)*(exp(-0.25*(x-15)/U)-a1)
        C = 10*(1-a1)+((4.882*110+75)/125)*a1-B0*a2-N0*a3
    return C
    end
end
using Plots
x=range(1,50)
y=dissolved_oxygen_concerntrations.(x,5,5)
plot(x,y)
```
## Problem 1.2
```julia
for i in range(15,50)
    if dissolved_oxygen_concerntrations(i,5,5) > 6
        return i-15
    end
end

```
## Problem 1.3
```julia
function treated_waste_2(x,p)
    U = 6
    B0 = (3.790*110+675*p/100)/125
    N0 = (4.136*110+525)/125
    a1 = exp(-0.55*(x-15)/U)
    a2 = (0.35/0.2)*(exp(-0.35*(x-15)/U)-a1)
    a3 = (0.25/0.3)*(exp(-0.25*(x-15)/U)-a1)
    C = 10*(1-a1)+((4.882*110+75)/125)*a1-B0*a2-N0*a3
end
for x in range(15,50)
    for p in range(0,100)
        if treated_waste_2(x-1,p) > treated_waste_2(x,p) && treated_waste_2(x+1,p) > treated_waste_2(x,p) && treated_waste_2(x,p) > 4
```
## Problem 1.4

## Problem 1.5

## Problem 1.6

## Problem 1.7

```julia; echo=false
# This block will not show up in compiled output.

using Distributions
using PDMats

# This function samples n correlated variates distributed over 
# Uniform([a[1], a[2]]) and Uniform([b[1], b[2]]) with correlation coefficient
# corr_coef.
function sample_correlated_uniform(n, a, b, corr_coef=0.7)
  mvnorm = MvNormal([0, 0], PDMat([1 corr_coef; corr_coef 1])) # set up a multivariate normal with each marginal variance of 1 and the right correlation
  norm_samples = rand(mvnorm, n)' # sample from the multivariate normal, the marginal distributions are a standard normal
  unif_samples = cdf.(Normal(0, 1), norm_samples) # convert samples to a uniform distribution using the pdf of a standard Normal
  samples = (unif_samples .* [a[2] - a[1] b[2] - b[1]]) .+ [a[1] b[1]]
  return samples
end
```

## Problem 1.8

```

# References